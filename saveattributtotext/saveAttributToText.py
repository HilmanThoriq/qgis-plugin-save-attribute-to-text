# -*- coding: utf-8 -*-
"""
/***************************************************************************
 saveAttributToText
                                 A QGIS plugin
 atribut akan disimpan dalam bentuk .txt
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2024-06-06
        git sha              : $Format:%H$
        copyright            : (C) 2024 by Hilman Thoriq | SIG UGM 2024
        email                : hilmanthoriq@mail.ugm.ac.id
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
from qgis.PyQt.QtCore import QSettings, QTranslator, QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import QAction, QFileDialog
from qgis.core import Qgis

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .saveAttributToText_dialog import saveAttributToTextDialog
import os.path


class saveAttributToText:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'saveAttributToText_{}.qm'.format(locale))

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr(u'&Save Attribute To Text')
        self.dlg = saveAttributToTextDialog()

        # Connect the Browse button click signal to the browseOutputFile slot
        self.dlg.mBrowseButton.clicked.connect(self.dlg.browseOutputFile)

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
        self.action = None

    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        return QCoreApplication.translate('saveAttributToText', message)

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""
        icon_path = 'C:/Users/hilma/AppData/Roaming/QGIS/QGIS3/profiles/default/python/plugins/saveattributtotext/icon.png'
        self.action = QAction(
            QIcon(icon_path),
            self.tr(u'Save Attribute To Text'),
            self.iface.mainWindow())
        self.action.triggered.connect(self.run)
        self.iface.addToolBarIcon(self.action)
        self.iface.addPluginToMenu(u'&Save Attribute To Text', self.action)

    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        self.iface.removePluginMenu(u'&Save Attribute To Text', self.action)
        self.iface.removeToolBarIcon(self.action)

    def run(self):
        """Run method that performs all the real work"""
        self.dlg.show()
        result = self.dlg.exec_()
        if result:
            layer = self.iface.activeLayer()
            if layer:
                file_name, _ = QFileDialog.getSaveFileName(self.dlg, "Save Attribute To Text", "", "Text Files (*.txt)")
                if file_name:
                    with open(file_name, 'w') as file:
                        for feature in layer.getFeatures():
                            attributes = feature.attributes()
                            file.write(', '.join(str(attr) for attr in attributes) + '\n')
                    self.iface.messageBar().pushMessage("Success", "Attributes saved to text file.", level=Qgis.Success)
            else:
                self.iface.messageBar().pushMessage("Error", "No active layer found.", level=Qgis.Critical)

    def saveAttributToText(self):
        # Dapatkan layer yang aktif
        layer = self.iface.activeLayer()

        # Dapatkan fitur dari layer
        features = layer.getFeatures()

        # Buka file teks untuk ditulis
        filename, _ = QtWidgets.QFileDialog.getSaveFileName(self.dlg, "Save Attribute to Text", "", "Text Files (*.txt)")
        if filename:
            with open(filename, "w") as f:
                # Iterasi melalui setiap fitur
                for feature in features:
                    # Dapatkan atribut fitur
                    attributes = feature.attributes()

                    # Tulis atribut ke file teks
                    line = ",".join(str(attr) for attr in attributes) + "\n"
                    f.write(line)

            # Tampilkan pesan sukses
            QtWidgets.QMessageBox.information(self.dlg, "Success", "Attributes saved to text file.")

    def browseOutputFile(self):
        file_name, _ = QFileDialog.getSaveFileName(self, "Save Attribute To Text", "", "Text Files (*.txt)")
        if file_name:
            self.mOutputFileLineEdit.setText(file_name)
